// checks whether the given yambas version is higher or equal to the required version
@NonCPS
def isVersionGte( currentVersion, requiredVersion ) 
{
    echo ( "Comparing version $currentVersion to $requiredVersion" )
    try
    {
        vMatcher1 = ("$currentVersion" =~ /(\d+)\.(\d+)/)
        vMatcher2 = ("$requiredVersion" =~ /(\d+)\.(\d+)/)
        major1 = vMatcher1[0][1].toInteger()
        echo("major1: $major1")
        minor1 = vMatcher1[0][2].toInteger()
        echo("minor1: $minor1")
        major2 = vMatcher2[0][1].toInteger()
        echo("major2: $major2")
        minor2 = vMatcher2[0][2].toInteger()
        echo("minor2: $minor2")
        echo("Yambas Version major: $major1, minor: $minor1") 
        echo("Required Version major: $major2, minor: $minor2") 
        return ( major2 < major1 || major2 == major1 && minor2 < minor1 || major2 == major1 && minor2==minor1 )|| (major2 == major1 && minor2 == minor1 )
    } 
    catch( Exception e )
    {
        e.printStackTrace()
        ret = false
        println e
    }
    finally 
    {
        vMatcher1 = null
        vMatcher2 = null
    }
    return ret;
}

@NonCPS
def extractModuleName() 
{
    echo ("Extracting module name from job name: ${env.JOB_NAME}")
    jobMatcher = "${env.JOB_NAME}".split('/')
    ret = jobMatcher[1]
    jobMatcher = null
    return ret;
}

def extractVersionName() 
{
    echo ("Extracting version name from job name: ${env.JOB_NAME}")
    jobMatcher = "${env.JOB_NAME}".split('/')
    ret = jobMatcher[2]
    jobMatcher = null
    return ret;
}

def extractVersionNameFromParentBranch(branchName) 
{
		sh "git config --replace-all remote.origin.fetch +refs/heads/*:refs/remotes/origin/*"
		sh "git fetch --all"
		sh "git checkout ${branchName}"
    sh( returnStatus: true, script:  'git show-branch -a | grep \'\\*\' | grep -v `git rev-parse --abbrev-ref HEAD` | head -n1 | sed \'s/.*\\[\\(.*\\)\\].*/\\1/\' | sed \'s/[\\^~].*//\' > branch.txt')
    ret = readFile 'branch.txt'
		if(ret.startsWith("origin/"))
		{
			ret = ret.substring(7).replaceAll("\n","");
		}
    return ret;
}

def extractVersionNameWithBranchFallback()
{
    def versionName = extractVersionName()
    def branchName = "${env.BRANCH_NAME}"
    echo("current branch name is ${branchName}")
    if ( !(versionName ==~ /[0-9]\.[0-9]/ ) )
    {
      echo ("The version number '${versionName}' is not valid. Trying to extract version number from parent branch.")
      versionName = extractVersionNameFromParentBranch( branchName )
    }

    if ( !(versionName ==~ /[0-9]\.[0-9]/ ) )
    {
      echo ("The version number '${versionName}' is not valid. Trying to get the artifact from a related branch directly.")
      versionName = extractVersionName()
    }
	return versionName;
}

env.PATH = "${tool 'Ant'}/bin:${env.PATH}"

stage ('Preparations') 
{
  properties ([
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '6')),
    pipelineTriggers([[ $class: 'hudson.triggers.TimerTrigger', spec  : "1 3 * * *"]]),
    disableConcurrentBuilds(),
    [$class: 'CopyArtifactPermissionProperty', projectNames: 'Processes/ModuleTests'],
    parameters(
      [
        [$class: 'BooleanParameterDefinition', description: 'Run with tests', name: 'runTests', defaultValue: true]
      ]
    )
  ])

  sh "sudo /var/lib/jenkins/clearMongo.sh"
}

RUN_TESTS = "$runTests".toBoolean()
VERSION_NAME = extractVersionNameWithBranchFallback()

stage ('Test') 
{
  if( RUN_TESTS )
  {
    def moduleName = extractModuleName()

    copyArtifacts(projectName: "Yambas/${VERSION_NAME}", filter: '**/target/yambas.war', selector: lastSuccessful())

    sh "mvn -B -f ${moduleName}-integrationtest/pom.xml clean install -Dyambas_war_dir=../yambas/target/yambas.war -P integrationtest ${MVN_OPTS}"
  }
}

stage ('Package') 
{
  def moduleName = extractModuleName()

  if( isVersionGte( VERSION_NAME, "3.3.0") ) 
  {
    sh "mvn -B -f ${moduleName}/pom.xml clean compile com.apiomat.helper:nm-maven-plugin:package"
  }
  else 
  {
    sh "mvn -B -f ${moduleName}/pom.xml clean install -Dant.target=package"
  }
}

stage ('Archive') 
{
  if( isVersionGte(VERSION_NAME, "3.3.0"))
  {
    archiveArtifacts artifacts: '**/target/*-NM.jar'
  }
  else
  {
    archiveArtifacts artifacts: '**/dist/*.jar'
  }
}

stage ('Publish') 
{
  if( RUN_TESTS )
  {
    openTasks asRegexp: true, canComputeNew: false, defaultEncoding: '',
                  excludePattern: '**/target/**/*.*,**/lib/**', ignoreCase: false,
                  high: '^.*((?:TODO|FIXME|XXX)(?! AOM)(.*))$', low: '^.*(XXX (AOM-\\d+.*))$', normal: '^.*((?:TODO|FIXME) (AOM-\\d+.*))$',
                  pattern: '**/*.java,**/*.iss,**/*.vm,**/*.js,**/*.cs,**/*.swift,**/*.m',
                  thresholdLimit: 'high'
    step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
  }
}

stage ('Notifications') 
{
  cleanWs notFailBuild: true
}
